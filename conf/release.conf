worker_processes  2;

error_log stderr notice;

events {
    worker_connections 1024;
}

daemon off;

env REDIS_HOST;
env REDIS_PORT;
env DEFAULT_TTL;
env DEFAULT_HOST_PRIORITY;
env MATCHED_HOST_PRIORITY;

http {
    default_type application/json;
    sendfile        on;
    access_log      off;

    client_max_body_size      5m;
    client_body_buffer_size   256k;
    client_header_timeout     3m;
    client_body_timeout       3m;
    send_timeout              3m;
    tcp_nopush                on;
    tcp_nodelay               on;
    keepalive_timeout         65;
    underscores_in_headers    on;
    ignore_invalid_headers    off;
    resolver                  127.0.0.1;

    gzip  on;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      '';
    }

    lua_socket_log_errors off;
    lua_check_client_abort on;
    lua_package_path "$prefix../?.lua;;";
    init_by_lua_block {
        local lrucache = require "resty.lrucache"
        cjson = require "cjson"
        cache = lrucache.new(1000)
        if not cache then
            ngx.exit(ngx.HTTP_BAD_REQUEST)
        end
    }

    server {
        listen 9527;
        
        underscores_in_headers on;
        ignore_invalid_headers off;

        rewrite ^/(.*)/favicon.ico$ /favicon.ico last;
        location ~* (favicon.ico) {
            log_not_found off;
            break;
        }

        location ~ ^/ {
            content_by_lua_block {
                ngx.say(cjson.encode({info = 'kaka v1.0.0'}))
            }
        }

        location ^~ /v1/conf/ {
            error_log stderr error;

            content_by_lua_file ../app.lua;
            #log_by_lua_file ../log.lua;
        }
        location ^~ /v1/module/ {
            error_log stderr error;

            content_by_lua_file ../module.lua;
            #log_by_lua_file ../log.lua;
        }


    }
}
